#! /usr/bin/python3
# popout3d.py

'''
--------------------------------------------------------------------------------
Popout3D Stereo Image Creation

Copyright 2015-2019 Chris Rogers <popout3d@yahoo.com>

GNU GENERAL PUBLIC LICENSE GPLv3

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have a copy of the GNU General Public License
    in /usr/share/common-licenses/GPL-3. If not, 
    see <http://www.gnu.org/licenses/>.

--------------------------------------------------------------------------------
Useful - symbolic link 
  ln -fs "/usr/share/popout3d/popout3d.py" "/usr/bin/popout3d"
  Needs removing after removing package.

Files:
    help, preferences, icon, startscreen
    program, ui program (ui bytecode gets created automatically)

--------------------------------------------------------------------------------
V1.1 changes from V1.0
Addition of image display

V1.1.1 changes from V1.1
When changing file, Folder or view, change listind to -1 to make sure it
starts on first image.
Revise selection of files.
Image view ratio 3:4.
Show new images.

V1.2
Remove print statements including one in statusbar.
Remove self.tr
Change gui from .ui to .py.
Change version check in preferences upload to '1'.
Improve some messages.
Move messages from textEdit box to StatusBar and file/folder info to title bar
Add folder to lists.
For Python3:
    Change xrange to range.
    Update dependencies.
    Change to /usr/bin/python3.
    From PyQt5 import QtCore, QtGui, Qtmenuitems and change QtGui to Qtmenuitems
    in several places.
    Scale image display.
    Separate data folder.

V1.3
Used fuser for locking

V1.3.1
Switch from ImageMagick/Wadd to Python PIL (or pillow).
Make sure image folder is always created.
Comments.
Improve file locking.

V1.4 3/2/2016
Changed File to Set
Corrected global variables and passed parameters.
Tidied up the defs which choose view style and left/right so they scroll through
images more neatly.
Separate def for loading preferences.
Revised preferences file.
Rearranged options on GUI into two columns, added progress panel and image title.
Remove most progress messages which were unhelpful.
Gtk option.
Switched spawned file from Bash to Python and added merge process to it.
Set maximum size of image display.
Remove old config files.

V1.4.1 28/3/2017
Remove previous files from view panel when processing.
Remove '>' from message about Forward button.
In Debreate - add email to description.
            - change architecture to amd64

V1.4.2 11/04/2017
Convert statusbar messages to popups.
Don't allow starting processing again if processing is already running.
Use gi.require_version('Gtk', '3.0')
Clear image when deleting file.
viewImage split into findImage and viewImage.  
Stop picture making window bigger than screen - Change picture size when window
size changes.
Sort out firstview variable
Start window maximized.
Increase startup image size, don't show filename.
Fix radio buttons.

V1.5.0 2019 
Fix variable name in popout3d_spawn.py.
Email address on startup image. Change website from Launchpad to GitHub.
No need to import 'time'.
Only need hugin-tools not hugin in Debian dependencies.
in _spawn remove A from RGBA and transparency mask. Has PIL changed?
Change from deprecated os.system to subprocess.run().
Compare version number from data file and program.
Remove confusion about folder/set - on start button, title display, view choices
Fix deleting an image clearing set name.

'''

import sys, os, shutil, subprocess #V1.5.0 , time

from PIL import Image

# qt ***************************************************************************
#from PyQt5 import QtCore, QtGui, Qtmenuitems 
#from popout3d_ui import Ui_window1
# gtk **************************************************************************

#V1.4.2
try:
    import gi
except:
    sys.exit('Failed to import gi')

try:
    gi.require_version('Gtk', '3.0')
except:
    sys.exit('gi wrong version')
#V1.4.2

from gi.repository import Gtk, GdkPixbuf
# ******************************************************************************
# create global variables and set default values

version = 'Popout3D V1.5.0'            # program version #V1.5.0

spawnprog = 'popout3d_spawn'           # spawned prog V1.5.0 remove .py Debian
spawnlock = 'spawn.lock'               # name of lock file spawned progam
spawntext = 'spawn.txt'                # name of text output from spawned progam

setprefs = True #V1.4.2
firstview = True #V1.4.2
startimage = True  #V1.4.2

form = ''                              # format in words
formlet = ''                           # first letter of format
style = ''                             # style in words
stylelet = ''                          # first letter of style
stylecode = ''                         # style in align-image-stack code

viewlist = []                          # list of images to view
viewind = -1                           # array index of image to view

progfold = '/usr/share/popout3d/'      # program #V1.5.0                                               
gladefile = 'popout3d.glade'           #V1.5.0
        
preffile = 'popout3d.dat'              # name of user preference file
helpfile = 'popout3d_help.html'        # name of help file
startfile = 'popout3d_start.png'       # name of image file shown at startup
homefold = os.getenv('HOME') + '/'     # get homefold folder
preffold = homefold + '.popout3d/'     # folder for preference file
workfold = homefold + '.popout3d/work/' # folder for images being worked on

myfold = homefold                      # set current folder
myfile = '{none}'                      # current file
myext = '{none}'                       # current extension

scope = ''                             # whether processing Folder or set

# statusmessage = ''                   # message for statusbar

#----------
# start in myfold folder
os.chdir(myfold)                       

def getPreferences():
    global version, myfold, myfile, myext, form, formlet, style, stylelet, \
      stylecode, view, scope

    # create hidden folder
    if not os.path.isdir(preffold):
        result = os.system('mkdir '+ preffold)
        if result != 0:
            sys.exit(result)                                           

    # create data folder
    if os.path.isdir(workfold):
        shutil.rmtree(workfold, True)

    result = os.system('mkdir '+ workfold)
    if result != 0:
        sys.exit(result)

    # copy default preferences file to preference folder
    if not os.path.isfile(preffold + preffile):
        shutil.copyfile(progfold + preffile, preffold + preffile)

    # create preferences array
    prefdata = []
    for i in range(7):
        prefdata.append('')

    # load preferences file
    with open(preffold + preffile, 'r') as infile:
        for i in range(0, 7):
            prefdata[i] = infile.readline() ; prefdata[i] = prefdata[i][:-1]
            # take linefeed off end of string

    # set preferences data
    #V1.5.0 Any previous versions of data file will be overwritten
    #if prefdata[0] == 'Popout3D V1.5.0':
    #    version = prefdata[0]
    if prefdata[0] == version:
        #
        if os.path.exists(prefdata[1]):
            myfold = prefdata[1]
        else:
            myfold = homefold

        myfile = prefdata[2] ; myext = prefdata[3]
        #V1.5.0
        if myfile == '{none}':
          scope = 'Folder'
        else:
          scope = 'Set'
        #

        if prefdata[4] in ['Anaglyph', 'Side-by-Side', 'Crossover']:
            form = prefdata[4]
        else:
            form = 'Anaglyph'

        if prefdata[5] in ['Level','Popout']:
            style = prefdata[5]
        else:
            style = 'Level'

        if prefdata[6] in ['All', 'New']: #V1.5.0
            view = prefdata[6]
        else:
            view = 'All'

    else:
        # copy default preferences file and use standard values this time
        shutil.copyfile(progfold + preffile, preffold + preffile)

        myfold = homefold
        myfile = '{none}'
        myext = '{none}'
        form = 'Anaglyph'
        style = 'Level'
        view = 'All'
        
        scope = 'Folder' #V1.5.0
        
    formlet = form[0:1] ; stylelet = style[0:1]
    if style == 'Level':
        stylecode = 'A'
    else:
        stylecode = 'P'

''' ~~~~~
def showstatus(self, which, message):
    # global statusmessage #V1.4.2

    if which == 'new':
        statusmessage = message
    else:
        statusmessage = statusmessage + message

    if len(statusmessage) > 150:
        statusmessage = statusmessage.partition('. ')[2] 
        # drop firstview sentence

    #self.statusBar().showMessage(statusmessage) # qt *****
    self.labelStatusbar.set_text(statusmessage) # gtk *****
'''
def showTitle(self, message):
    #self.setWindowTitle(message) # qt *****
    self.window.set_title(message) # gtk *****

def showTip(self):
    
    if view == 'All':
      #self.ui.??.setText('All 3D Images') # qt *****
      self.labelView.set_label('All 3D Images') # gtk *****
    else:   
      #self.ui.??.setText('New 3D Images') # qt *****
      self.labelView.set_label('New 3D Images') # gtk *****

''' #V1.5.0
    else: # File
        #self.ui.??.setText('Images in this Set') # qt *****
        self.labelView.set_label('Images in this Set') # gtk *****
    elif view == 'Folder':
        #self.ui.??.setText('Images in this Folder') # qt *****
        self.labelView.set_label('Images in this Folder') # gtk *****
'''
def clearImage(self):
    # qt ***********************************************************************
    # here clear image1 label
    # self.ui.label.clear()
    # gtk **********************************************************************
    self.image1.clear()
    self.labelImage1.set_text('')
    # **************************************************************************

def showMessage(self, which, message):
    # qt ***********************************************************************
    '''
    if which == 'warn':
        result = Qtmenuitems.QMessageBox.question(self, 'Warning', message, Qtmenuitems.QMessageBox.Close)
    else: # 'ask'
        result = Qtmenuitems.QMessageBox.question(self, 'Are you sure?', message, Qtmenuitems.QMessageBox.No, Qtmenuitems.QMessageBox.Yes)
        if result == 16384:
            return('Y')
        else:
            return('N')
    '''        
    # gtk **********************************************************************
    if which == 'warn':
        self.messageWarning.format_secondary_text(message)
        self.result = self.messageWarning.run() ; self.messageWarning.hide()
    else: # 'ask'
        self.messageQuestion.format_secondary_text(message)
        self.result = self.messageQuestion.run() ; self.messageQuestion.hide()
        if self.result == Gtk.ResponseType.YES:
            return('Y')
        else:
            return('N')
        
    # **************************************************************************

#===============================================================================
# progress panels GTK - no Qt written
def showProgress(self):

    showTip(self)
    # queuing and processing panels
    if view == 'New':

        # queuing
        foldlist = ''
        for filename in os.listdir(workfold):
            newfile, newext = os.path.splitext(filename) 
            if newext == '.queue':
                foldlist = foldlist + '3D'+newfile+'\n'
        self.labelQueuing.set_text(foldlist) 

        # processing
        foldlist = ''
        for filename in os.listdir(workfold):
            newfile, newext = os.path.splitext(filename) 
            if newext == '.process':
                foldlist = foldlist + '3D'+newfile+'\n'
        self.labelProcessing.set_text(foldlist) 

    else: # Folder or Set #V1.5.0 All 

        # queuing
        self.labelQueuing.set_text('') 

        # processing
        self.labelProcessing.set_text('') 

    # viewing
    foldlist = ''
    for i in viewlist:
        f = '3D'+i[0]+'.'+i[1]
        foldlist = foldlist + f +'\n'
    self.labelViewing.set_text(foldlist) 

#===============================================================================
# make list of viewable 3D images, merge one aligned pair if available
def makeViewlist(self):
    global viewlist, viewind
    
    clearImage(self)
    viewlist = []

    if view == 'New':
        # foldlist = '' #V1.4.1
        for filename in os.listdir(workfold):
            newfile, newext = os.path.splitext(filename)
            if newext == '.view':
                newfile, newext = os.path.splitext(newfile)
                viewlist.append([newfile, newext[1:]])
    else: # All
        # search through myfold for suitable files
        for newfile in os.listdir(myfold):
            if (newfile[0:2] == '3D'
              and (newfile.endswith('.jpg') or newfile.endswith('.JPG')
              or newfile.endswith('.tiff') or newfile.endswith('.TIFF')
              or newfile.endswith('.tif') or newfile.endswith('.TIF')
              or newfile.endswith('.png') or newfile.endswith('.PNG'))):
                newfile, newext = os.path.splitext(newfile)
                
                #V1.5.0
                viewlist.append([newfile[2:], newext[1:]])
                '''
                # only add selected files to viewlist
                if (scope == 'Set' # only add file selected file to viewlist
                  and myfile == newfile[2:len(myfile)+2] \
                  and myext == newext[1:]):
                    viewlist.append([newfile[2:], newext[1:]])
                    
                # only add file to viewlist if it is in selected folder
                elif scope == 'Folder':
                    viewlist.append([newfile[2:], newext[1:]])
                '''
                
        viewlist = sorted(viewlist)
        viewind = 0

#===============================================================================
# View image #V1.4.2
def viewImage(self, fn):
    global startimage
    # qt ***************************************************************
    '''
    # here show current image name
    #myPixmap = QtGui.QPixmap(myfold+'3D'+viewlist[viewind][0]+'.'+viewlist[viewind][1])
    myPixmap = QtGui.QPixmap(fn)
    myPixmap = myPixmap.scaledToWidth(1000)
    self.ui.label.setPixmap(myPixmap)
    '''
    # gtk **************************************************************
    #self.labelImage1.set_text('3D'+viewlist[viewind][0]+'.'+viewlist[viewind][1]) #V1.4.2
    #pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(myfold+'3D'+viewlist[viewind][0]+'.'+viewlist[viewind][1], 900, 550, True) # width, height, preserve_active_ratio #V1.4.2

    self.labelImage1.set_text(fn) #V1.4.2
    
    # get size of window

    if startimage:
        self.labelImage1.set_text('') #V1.4.2
        w = 2000 ; h = 750 #V1.5.0 startimage = False
    else:
        self.labelImage1.set_text(fn) #V1.4.2
        allocation = self.alignment1.get_allocation()
        w = allocation.width-25; h = allocation.height-25

    # retrieve image and adjust
    # file, width, height, preserve_active_ratio
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(fn, w, h, True) 
    self.image1.set_from_pixbuf(pixbuf)
# ******************************************************************
        
#===============================================================================
# Check value of viewlist indicator, then show image #V1.4.2 find image
def findImage(self): #V1.4.2
    global viewind

    # make sure viewing list indicator hasn't gone off the end
    if viewind < 0:
        viewind = 0
    elif viewind > len(viewlist) -1:
        viewind = len(viewlist) -1

    # provided viewing list isn't empty, select currently indicated image from 
    #the viewlist #V1.4.2 and show it.
    if len(viewlist) > 0:
        if os.path.isfile(myfold+'3D'+viewlist[viewind][0]+'.'+viewlist[viewind][1]):
            viewImage(self, myfold+'3D'+viewlist[viewind][0]+'.'+viewlist[viewind][1])

#===============================================================================
# check each pair of images is valid, then write a .queue file
def processPair(self, newfile, newext, leftn, rightn):
    # global statusmessage #V1.4.2, newlist

    imageL = myfold+newfile+str(leftn)+'.'+newext
    imageR = myfold+newfile+str(rightn)+'.'+newext

    # open images and get image type and size
    try:
        img = Image.open(imageL)
    except:
        print ('Unable to load left image')
        sys.exit()
    img.load()
    imageLF = img.format ; imageLS = img.size

    try:
        img = Image.open(imageR)
    except:
        print ('Unable to load right image')
        sys.exit()
    img.load()
    imageRF = img.format ; imageRS = img.size

    # if images match on type and size align them,
    # otherwise warn they are incompatible and skip them
    if imageLF == imageRF and imageLS == imageRS:

        # if there are no lock files, call the alignment program
        # Quotes used around filenames to deal with special characters like "("

        queuefile = workfold+newfile+str(leftn)+'+'+str(rightn)+formlet+stylelet+'.'+newext+'.queue'
        if not os.path.isfile(queuefile):
            with open(queuefile, 'w') as fn:
                fn.write('')
            #showstatus(self,'new','To update the progress panels press [Forward]. ') #V1.4.2

    else:
        if imageLF != imageRF:
            #result = Qtmenuitems.QMessageBox.question(self, 'Warning', 'Files ' + newfile+str(leftn)+'.'+newext + ' and ' + newfile+str(rightn)+'.'+newext + ' can not be used, they are different filetypes. ', Qtmenuitems.QMessageBox.Close)
            showMessage(self,  'warn', newfile+str(leftn)+'.'+newext + ' and ' + newfile+str(rightn)+'.'+newext + ' can not be used as they are different filetypes. ')
        if imageLS != imageRS:
            #result = Qtmenuitems.QMessageBox.question(self, 'Warning', 'Files ' + newfile+str(leftn)+'.'+newext + ' and ' + newfile+str(rightn)+'.'+newext + ' can not be used, they are different sizes. ', Qtmenuitems.QMessageBox.Close)
            showMessage(self, 'warn', newfile+str(leftn)+'.'+newext + ' and ' + newfile+str(rightn)+'.'+newext + ' can not be used as they are different sizes. ')

#===============================================================================
# loop through set of images to call processPair for each valid pair
def processSet(self, newfile, newext):

    # global statusmessage #V1.4.2    

    # find out how many images there are in this set
    imagestodo = 0 # count of number of input files
    for i in range (0, 9):
        if os.path.isfile(myfold+newfile+str(i)+'.'+newext):
            imagestodo = imagestodo + 1

    # if there are at least two images in the set,
    # repeatedly call processPair to process them, 
    # otherwise warning statusmessage
    if imagestodo == 0:
        pass # showstatus(self, 'new', 'There are no suitable images in the set ' + newfile + '*.' + newext + '. ')
    elif imagestodo == 1:
        pass # showstatus(self, 'new', 'There is only one file in the set ' + newfile + '*.' + newext + ', at least two are needed. ')
    else:
        # loop through all valid image pairs

        leftn = 0 ; rightn = 1 # left and right image numbers
        while leftn < 9: # can only deal with single digit image numbers

            rightn = leftn + 1
            while rightn < 10: # highest possible image number is 9

                # both files exist but so does a 3D file so do nothing
                if (os.path.isfile(myfold+newfile+str(leftn)+'.'+newext) and os.path.isfile(myfold+newfile+str(rightn)+'.'+newext)
                  and os.path.isfile(myfold+'3D'+newfile+str(leftn)+'+'+str(rightn)+formlet+stylelet+'.'+newext)):
                    # showstatus(self, 'add', '3D'+newfile+str(leftn)+'+'+str(rightn)+formlet+stylelet+'.'+newext+' already exists. ') #V1.4.2
                    showMessage(self, 'warn', '3D'+newfile+str(leftn)+'+'+str(rightn)+formlet+stylelet+'.'+newext+' already exists. ') #V1.4.2

                # both files exist and there is no 3D file
                elif (os.path.isfile(myfold+newfile+str(leftn)+'.'+newext) and os.path.isfile(myfold+newfile+str(rightn)+'.'+newext)
                  and not os.path.isfile(myfold+'3D'+newfile+str(leftn)+'+'+str(rightn)+formlet+stylelet+'.'+newext)):
                    processPair(self, newfile, newext, leftn, rightn)
        
                # else there is a gap in the sequence so do nothing

                rightn = rightn + 1
            leftn = leftn + 1

# qt ***************************************************************************
# Load the UI, define UI class and actions
'''
class MyWindowClass(Qtmenuitems.QMainWindow):
    def __init__(self, parent = None):
        Qtmenuitems.QMainWindow.__init__(self, parent)
        self.ui = Ui_window1()

        self.ui.setupUi(self)
        # Bind the event handlers to the radio buttons, no need for Quit as it is handled by GUI
        self.ui.imagemenuitemFolder.triggered.connect(self.imagemenuitemFolder)
        self.ui.imagemenuitemSet.triggered.connect(self.imagemenuitemSet)
        self.ui.imagemenuitemPreferences.triggered.connect(self.imagemenuitemPreferences)
        self.ui.imagemenuitemHelp.triggered.connect(self.imagemenuitemHelp)
        self.ui.imagemenuitemAbout.triggered.connect(self.imagemenuitemAbout)

        self.ui.radiobuttonAnaglyph.clicked.connect(self.radiobuttonAnaglyph)
        self.ui.radiobuttonSidebyside.clicked.connect(self.radiobuttonSidebyside)
        self.ui.radiobuttonCrossover.clicked.connect(self.radiobuttonCrossover)
        self.ui.radiobuttonLevel.clicked.connect(self.radiobuttonLevel)
        self.ui.radiobuttonPopout.clicked.connect(self.radiobuttonPopout)
        self.ui.radiobuttonAll.clicked.connect(self.radiobuttonAll)
        self.ui.radiobuttonSet.clicked.connect(self.radiobuttonSet)
        self.ui.radiobuttonNew.clicked.connect(self.radiobuttonNew)
        self.ui.buttonFolder.clicked.connect(self.buttonFolder)
        self.ui.buttonSet.clicked.connect(self.buttonSet)
        self.ui.buttonBack.clicked.connect(self.buttonBack)
        self.ui.buttonForward.clicked.connect(self.buttonForward)
        self.ui.buttonDelete.clicked.connect(self.buttonDelete)
        self.ui.fileDialog = Qtmenuitems.QFileDialog(self)
        '''
# gtk ******************************************************************
class GUI:
    def __init__(self):
        global firstview, setprefs, startimage
        '''
        #V1.5.0
        self.gladefile = progfold+'popout3d.glade'
        
        self.builder = Gtk.Builder()
        self.builder.add_from_file(self.gladefile)
        '''
        self.glade = progfold+gladefile
        
        self.builder = Gtk.Builder()
        self.builder.add_from_file(self.glade)
        #
        
        self.window = self.builder.get_object('window1')
        self.labelImage1 = self.builder.get_object('labelImage1')
        self.window.show()
        self.builder.connect_signals(self)


        #self.labelStatusbar = self.builder.get_object('labelStatusbar') #V1.4.2
        self.labelQueuing = self.builder.get_object('labelQueuing')
        self.labelProcessing = self.builder.get_object('labelProcessing')
        self.labelViewing = self.builder.get_object('labelViewing')
        self.labelView = self.builder.get_object('labelView')

        self.messageQuestion = self.builder.get_object('messagedialogQuestion')
        self.messageWarning = self.builder.get_object('messagedialogWarning')
        self.dialogboxAbout = self.builder.get_object('dialogboxAbout')
        self.dialogHelp = self.builder.get_object('dialogHelp')
        self.image1 = self.builder.get_object('image1')

        #V1.4.2 for available size
        self.alignment1 = self.builder.get_object('alignment1') 

        self.labelBack = self.builder.get_object('buttonBack')
        self.labelForward = self.builder.get_object('buttonForward')

        self.activeAnaglyph = self.builder.get_object('radiobuttonAnaglyph')
        self.activeSidebyside = self.builder.get_object('radiobuttonSidebyside')
        self.activeCrossover = self.builder.get_object('radiobuttonCrossover')

        self.activeLevel = self.builder.get_object('radiobuttonLevel')
        self.activePopout = self.builder.get_object('radiobuttonPopout')
        #V1.5.0
        self.activeAll = self.builder.get_object('radiobuttonAll')
        self.activeNew = self.builder.get_object('radiobuttonNew')
        #self.activeFolder = self.builder.get_object('radiobuttonFolder')
        #self.activeSet = self.builder.get_object('radiobuttonSet')

        # **********************************************************************        

        # set preference variables and set title
        getPreferences()
        #V1.5.0     
        #showTitle(self, version + '          Folder: ' + myfold 
        #+ '          File Set: ' + myfile + '*.' + myext)
        if scope == 'Folder':
          showTitle(self, version + '          Folder: ' + myfold)
        else:
          showTitle(self, version + '          Set: ' + myfile + '*.' + myext)
        #
        # qt *******************************************************************
        '''
        if form == 'Anaglyph':
            self.ui.radiobuttonAnaglyph.setChecked(True)
        elif form == 'Side-by-Side':
            self.ui.radiobuttonSidebyside.setChecked(True)
        else:
            self.ui.radiobuttonCrossover.setChecked(True)

        if style == 'Level':
            self.ui.radiobuttonLevel.setChecked(True)
        else:
            self.ui.radiobuttonPopout.setChecked(True)

        if view == 'Folder':
            self.ui.radiobuttonNew.setChecked(True)          
        elif view == 'Set':
            self.ui.radiobuttonSet.setChecked(True)
        else:
            self.ui.radiobuttonAll.setChecked(True)
            self.ui.tip.setText('Merge')
        '''
        # gtk ******************************************************************
        # activating any of these triggers the one activated and the one 
        # de-activated
        
        if form == 'Anaglyph':
            self.activeAnaglyph.set_active(True)
        elif form == 'Side-by-Side':
            self.activeSidebyside.set_active(True)
        else:
            self.activeCrossover.set_active(True)

        if style == 'Level':
            self.activeLevel.set_active(True)
        else:
            self.activePopout.set_active(True)
        
        setprefs = True
        if view == 'New':
            self.activeNew.set_active(True)
        else:
            self.activeAll.set_active(True)

        '''#V1.5.0
        elif view == 'Folder':
            self.activeFolder.set_active(True)
        else:
            self.activeSet.set_active(True)
        '''
        setprefs = False
        
        self.window.maximize() #V1.4.2

        # quickstart image
        if os.path.isfile(progfold+startfile):
            viewImage(self, progfold+startfile) #V1.4.2
        startimage = False
    # ==========================================================================
    # definitions ==============================================================

    # qt ***********************************************************************
    '''
    No need for window destroy, imagemenuitemQuit or Quit button definition
    as it is handled by GUI
    '''
    # gtk **********************************************************************
    def on_window1_destroy(self, object): # close window with 0 or X
        Gtk.main_quit()

    def imagemenuitemQuit(self, menuitem): # quit with File>Quit
        Gtk.main_quit()
       
    def buttonQuit(self, menuitem): # quit with Quit button
        Gtk.main_quit()
    # **************************************************************************
    
    # menu bar choose folder
    def imagemenuitemFolder(self, menuitem):
        global myfold, myfile, myext, scope # statusmessage #V1.4.2 #V1.5.0 scope
        scope = 'Folder' #V1.5.0
        # qt *******************************************************************
        # newfold = Qtmenuitems.QFileDialog.getExistingDirectory(self, 'Select the Folder where the images are', directory = homefold) 
        # gtk ******************************************************************
        filechooserdialog = Gtk.FileChooserDialog(title='Select the Folder where the images are',
          action=Gtk.FileChooserAction.SELECT_FOLDER,
          parent=self.window,
          buttons=["Cancel", Gtk.ResponseType.CANCEL, "Select",Gtk.ResponseType.OK])
        filechooserdialog.set_current_folder (myfold)
        response = filechooserdialog.run()    
        filechooserdialog.hide()

        if response == Gtk.ResponseType.OK:
            newfold = filechooserdialog.get_filename()
        else: # answered No or closed window
            newfold = '{none}'   
        
        # **********************************************************************
        newfold = newfold+'/'
        if newfold[0:len(homefold)] == homefold:
            myfold = newfold; os.chdir(myfold) # filename is original name less ending digit
            myfile = '{none}' ;  myext = '{none}' # as it may be a set which is not in the new folder
        else:
            showMessage(self, 'warn', 'Folder not changed')

        #showTitle(self, version + '          Folder: ' + myfold + '          File Set: ' + myfile + '*.' + myext) #V1.5.0
        showTitle(self, version + '          Folder: ' + myfold)
        # update viewlist
        makeViewlist(self)
        findImage(self)
        showProgress(self)
        
    # menu bar choose set
    def imagemenuitemSet(self, menuitem):
        global myfold, myfile, myext, scope # statusmessage #V1.4.2 #V1.5.0 scope
        scope = 'Set' #V1.5.0
        # qt *******************************************************************
        '''
        newfile, _ = Qtmenuitems.QFileDialog.getOpenFileName(self, 'Select any file from a set of images', folder = myfold, filter = '*.jpg *.JPG *.jpeg *.JPEG *.tiff *.TIFF *.tif *.TIF *.png *.PNG')
        newfile = str(newfile) # filename is not string type
        '''
        # gtk ******************************************************************
        filechooserdialog = Gtk.FileChooserDialog(title="Select any file from a set of images",
          action=Gtk.FileChooserAction.OPEN, 
          parent=self.window,
          buttons=["Cancel", Gtk.ResponseType.CANCEL, "Select",Gtk.ResponseType.OK])
        filechooserdialog.set_current_folder (myfold)
        fileFilter = Gtk.FileFilter() ; fileFilter.add_pattern('*.JPG') ; fileFilter.set_name('Image files') ; filechooserdialog.add_filter(fileFilter)
        response = filechooserdialog.run()    
        filechooserdialog.hide()
        
        if response == Gtk.ResponseType.OK:
            newfile = filechooserdialog.get_filename()
        else: # answered No or closed window
            newfile = '{none}'   
        
        # **********************************************************************

        if newfile[0:len(homefold)] == homefold:
            newfold, newfile = os.path.split(newfile)
            if newfile[0:2] != '3D':
                os.chdir(newfold)
                newfile, newext = os.path.splitext(newfile)
                if newfile[len(newfile)-1:] in ['0','1','2','3','3','5','6','7','8','9']:
                    myfold = newfold +'/' ; myfile = newfile[:-1]; myext = newext[1:] # filename is original name less ending digit
                else:
                    showMessage(self, 'warn', 'Filename must end in a digit.')       

        if myfile == '':
            myfile = '{none}' ; myext = '{none}'
            showMessage(self, 'warn', 'No file selected')
        else:
            #showTitle(self, version + '          Folder: ' + myfold + '          File Set: ' + myfile + '*.' + myext) #V1.5.0 
            showTitle(self, version + '          Set: ' + myfile + '*.' + myext)
            #end
            # update viewlist
            makeViewlist(self)
            findImage(self)
            showProgress(self)

    # menu bar save preferences
    def imagemenuitemPreferences(self, menuitem):
        result = showMessage(self, 'ask', 'This will save your current settings as the defaults.')
        if result == 'Y':
            with open(preffold + preffile, 'w') as fn:
                fn.write(version+'\n')
                fn.write(myfold+'\n')
                fn.write(myfile+'\n')
                fn.write(myext+'\n')
                fn.write(form+'\n')
                fn.write(style+'\n')
                fn.write(view+'\n')

    # menu bar help
    def imagemenuitemHelp(self, menuitem):

        # qt *******************************************************************
        '''
        self.helpPanel = Qtmenuitems.QDialog()
        self.helpPanel.setModal(True)
        self.helpPanel.setWindowTitle('Help')
        helptext = Qtmenuitems.QTextEdit(self.helpPanel)
        with open(progfold + helpfile, 'r') as infile:
            result = infile.read()
        helptext.setHtml(result)
        helptext.setReadOnly(-1)
        helptext.resize(800, 500)
        self.helpPanel.show()
        helptext.show()
        '''
        # Gtk*******************************************************************
        self.response = self.dialogHelp.run() ; self.dialogHelp.hide()
        # **********************************************************************

    # menu bar about
    def imagemenuitemAbout(self, menuitem):
        # qt *******************************************************************
        '''
        result = Qtmenuitems.QMessageBox.about(self, 'About this program',
            '       '+version+'\n'+
            '     Stereo Image Creation\n\n'+
            'Copyright (C) 2015 Chris Rogers\n'+
            ' GNU GENERAL PUBLIC LICENSE\n\n'+
            '  The clever stuff is done by\n'+
            '    Hugin - Image Alignment\n'+
            ' http://hugin.sourceforge.net/')
        '''
        # gtk ******************************************************************
        
        self.response = self.dialogboxAbout.run() ; self.dialogboxAbout.hide()
        
        # **********************************************************************
        
    # form actions
    def radiobuttonAnaglyph(self, menuitem):
        global form, formlet
        if menuitem.get_active():
            form = 'Anaglyph' ; formlet = 'A'

    def radiobuttonSidebyside(self, menuitem):
        global form, formlet
        if menuitem.get_active():
            form = 'Side-by-Side' ; formlet = 'S'

    def radiobuttonCrossover(self, menuitem):
        global form, formlet
        if menuitem.get_active():
            form = 'Crossover' ; formlet = 'C'

    # style actions
    def radiobuttonLevel(self, menuitem):
        global style, stylelet, stylecode
        if menuitem.get_active():
            style = 'Level' ; stylelet = 'L' ; stylecode = 'A'

    def radiobuttonPopout(self, menuitem):
        global style, stylelet, stylecode
        if menuitem.get_active(): 
            style = 'Popout' ; stylelet = 'P' ; stylecode = 'P'

    #V1.5.0 Start button replaced Folder and Set buttons
    def buttonStart(self, menuitem):
        # global statusmessage #V1.4.2
        # showstatus(self, 'new', '') # qt was self.statusBar().clearMessage()

        # check processing isn't already running
        if os.path.isfile(workfold+spawnlock):
            # showstatus(self,'new','Processing already running.') #V1.4.2
            showMessage(self, 'warn', 'Processing already running.') #V1.4.2
        else:
            clearImage(self)
            todolist = []; 

            if scope == 'Folder':
                for newfile in os.listdir(myfold):
                    if (newfile[0:2] != '3D' and
                            (newfile.endswith('.jpg') or newfile.endswith('.JPG')
                            or newfile.endswith('.tiff') or newfile.endswith('.TIFF')
                            or newfile.endswith('.tif') or newfile.endswith('.TIF')
                            or newfile.endswith('.png') or newfile.endswith('.PNG'))):
                        newfile, newext = os.path.splitext(newfile)
                        if newfile[-1:] in ['0','1','2','3','3','5','6','7','8','9'] and [newfile[:-1], newext[1:]] not in todolist:
                            todolist.append([newfile[:-1], newext[1:]])
                            
            else: #scope ='Set'
                if myfile != '{none}' and myext != '{none}':
                    todolist.append([myfile, myext])
           
            if todolist != []:

                todolist = sorted(todolist)

                for newfile in todolist:
                    # filename style is name less last digit - there's no 3D at the beginning
                    processSet(self, newfile[0], newfile[1])

                with open(workfold+spawntext, 'w') as f: # output to text file
                    subprocess.Popen([progfold+spawnprog, workfold, myfold], stdout = f) # run spawnprog
            else:
                showMessage(self, 'warn', 'You have selected no suitable files.')

            # remove .view files #V1.4.1
            for fn in os.listdir(workfold):
                dummy, fx = os.path.splitext(fn) 
                if fx == '.view':
                    os.remove(workfold+fn)

            makeViewlist(self)
            showProgress(self)

    def radiobuttonNew(self, menuitem):
        global view
        if menuitem.get_active():
            view = 'New'
            makeViewlist(self)
            if not setprefs: findImage(self)
            showProgress(self)

    #V1.5.0 added
    def radiobuttonAll(self, menuitem):
        global view
        if menuitem.get_active():
            view = 'All'
            makeViewlist(self)
            if not setprefs: findImage(self)
            showProgress(self)

    '''
    V1.5.0 removed
    # view folder
    def radiobuttonNew(self, menuitem):
        global view
        if menuitem.get_active():
            view = 'Folder'
            makeViewlist(self)
            if not setprefs: findImage(self)
            showProgress(self)

    # view set
    def radiobuttonSet(self, menuitem):
        global view
        if menuitem.get_active():
            view = 'Set'
            makeViewlist(self)
            if not setprefs: findImage(self)
            showProgress(self)
    '''        
    def buttonBack(self, menuitem):
        global viewind        
        viewind = viewind - 1
        findImage(self)
        showProgress(self)

    def buttonForward(self, menuitem):
        global viewind, firstview

        if firstview:
            viewind = 0
            firstview = False
        else:
            viewind = viewind + 1
        
        if view == 'New':
            makeViewlist(self) 
        findImage(self)
        showProgress(self)

    def buttonDelete(self, menuitem):
        # filename style of finished file, but 3D at the beginning has to be added
        if viewind > -1:
            if os.path.isfile(myfold+'3D'+viewlist[viewind][0]+'.'+viewlist[viewind][1]):
                #result = Qtmenuitems.QMessageBox.question(self, 'Delete file.', 'Delete ' + myfold+'3D'+viewlist[viewind][0]+'.'+viewlist[viewind][1] + '?', Qtmenuitems.QMessageBox.No, Qtmenuitems.QMessageBox.Yes)
                result = showMessage(self, 'ask', 'Delete ' + myfold+'3D'+viewlist[viewind][0]+'.'+viewlist[viewind][1] + '?')
                if result == 'Y': # Yes
                    clearImage(self) #V1.4.2
                    try: #V1.5.0
                        os.remove(myfold+'3D'+viewlist[viewind][0]+'.'+viewlist[viewind][1])
                    except:
                        pass    
                    #V1.5.0 del viewlist[viewind]
                    findImage(self)
                    showProgress(self)

# qt ***************************************************************************
'''
app = Qtmenuitems.QApplication(sys.argv)
myWindow = MyWindowClass()
myWindow.show()
sys.exit(app.exec_())
'''
# Gtk***************************************************************************
if __name__ == '__main__':
    main = GUI()
    Gtk.main()

# ******************************************************************************
